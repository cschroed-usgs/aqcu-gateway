package gov.usgs.aqcu.service;

import java.util.UUID;

import com.amazonaws.ClientConfiguration;
import com.amazonaws.PredefinedClientConfigurations;
import com.amazonaws.services.lambda.AWSLambda;
import com.amazonaws.services.lambda.AWSLambdaClientBuilder;
import com.amazonaws.services.lambda.model.InvokeRequest;
import com.amazonaws.services.lambda.model.InvokeResult;
import com.amazonaws.util.StringUtils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import gov.usgs.aqcu.exception.LambdaExecutionException;
import gov.usgs.aqcu.exception.LambdaInvocationException;
import gov.usgs.aqcu.lambda.LambdaFunctionConfig;

@Service
public class LambdaReportService {
    private final Logger LOG = LoggerFactory.getLogger(LambdaReportService.class);

    private AWSLambdaClientBuilder awsLambdaClientBuilder;

    @Autowired
    public LambdaReportService(AWSLambdaClientBuilder awsLambdaClientBuilder) {
        this.awsLambdaClientBuilder = awsLambdaClientBuilder;
    }

    /**
     * Executes a Lambda function with the specified function name (fully qualified) and provides it
     * with the provided payload (should be stringified JSON). The Lambda function response body will
     * be extracted and returned as a String (should be stringified JSON) if the Lambda is successful.
     * If the Lambda has an error an exception will be thrown:
     * 
     * 1. If an error occurs internally while the SDK attempts to invoke the Lambda that error will be
     *    thrown by this function - Any error that could be generated by AWSLambda.invoke(..).
     * 2. If the response from the SDK Lambda invocation includes a functionError attribute then the
     *    function itself encountered an error during execution, the details of which are in the response
     *    body. This situation will still result in a 200 response code from the AWS Lambda API. This 
     *    situation will throw a LambdaExecutionException including the response body as the message.
     * 3. If the response from the SDK Lambda invocation includes an HTTP Status Code outside of the 200s
     *    then an error occurred in AWS Lambda's API while trying to invoke out Lambda. This situation
     *    does not cause the SDK to throw an error, instead the details of the error will be included in
     *    the response body.
     * 
     * @param LambdaFunctionConfig The populated LambdaFunctionConfig object (loaded from YAML) containing
     * the function name and timeout in MS.
     * @param payload The String payload to send to the Lambda function. This should be stringified JSON
     * @return The response body from the Lambda function. This should be stringified JSON
     */
    public String execute(LambdaFunctionConfig function, String payload) {
        InvokeResult result;
        ClientConfiguration clientConfiguration = PredefinedClientConfigurations.defaultConfig()
            .withMaxErrorRetry(0)
            .withRequestTimeout(function.getTimeout() * 2)
            .withSocketTimeout(function.getTimeout() * 2);
        AWSLambda client = awsLambdaClientBuilder
            .withClientConfiguration(clientConfiguration)
            .build();
        InvokeRequest request = new InvokeRequest()
            .withFunctionName(function.getName())
            .withPayload(payload)
            // Disable single-request timeout in favor of client execution timeout in order to avoid retries
            .withSdkRequestTimeout(function.getTimeout())
            .withSdkClientExecutionTimeout(function.getTimeout());

        String guidString = UUID.randomUUID().toString();
        LOG.debug("Lambda '" + function.getName() + "' initiated - " + guidString);
        
        result = client.invoke(request);

        String resultString = getResponsePayloadString(result);

        if(!StringUtils.isNullOrEmpty(result.getFunctionError())) {
            // An error occurred in the Lambda itself
            throw new LambdaExecutionException(resultString);
        } else if(result.getStatusCode() < 200 || result.getStatusCode() >= 300) {
            // An error occurred trying to hit the Lamba API
            throw new LambdaInvocationException("Lambda API Error: (" + result.getStatusCode() + "):\n" + resultString);
        }

        // The Lambda succeeded
        LOG.debug("Lambda '" + function.getName() + "' succeeded - " + guidString);
        return resultString;
    }

    /**
     * Extracts the response payload as a UTF-8 String from the response object. If this fails
     * a LambdaInvocationException is thrown because an error occurred while trying to invoke
     * the Lambda function, but not within the Lambda function itself.
     * 
     * @param result The InvokeResult instance received from AWSLambda.invoke(..)
     * @return The UTF-8 String extracted from the response object
     */
    protected String getResponsePayloadString(InvokeResult result) {
        try {
            return new String(result.getPayload().array(), "UTF-8");
        } catch(Exception e) {
            throw new LambdaInvocationException(e);
        }
    }
}